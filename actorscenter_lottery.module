<?php

drupal_add_css(drupal_get_path('module', 'actorscenter_lottery') . '/actorscenter_lottery.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
drupal_add_js(drupal_get_path('module', 'actorscenter_lottery') . '/actorscenter_lottery.js');


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function actorscenter_lottery_help($path, $arg) {
  switch ($path) {
    case "admin/help#actorscenter_lottery":
      return '<p>' . t("Content types and other code for AC's Lottery auditions") . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function actorscenter_lottery_admin() {
  $form = array();

  $form['lottery_auditions_signup_open_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Open signup instructions'),
    '#default_value' => variable_get('lottery_auditions_signup_open_message'),
    '#cols' => 50,
    '#rows' => 3,
    '#maxlength' => 300,
    '#description' => t("The message to show on a lottery audition signup form when the lottery is open and the user has not yet signed up."),
    '#required' => TRUE,
  );
  $form['lottery_auditions_signup_closed_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Closed signup message'),
    '#default_value' => variable_get('lottery_auditions_signup_closed_message'),
    '#cols' => 50,
    '#rows' => 3,
    '#maxlength' => 300,
    '#description' => t("The message to show on a lottery audition signup form when the lottery is closed, the user has signed up, and the lottery has not yet been drawn."),
    '#required' => TRUE,
  );
  $form['lottery_auditions_signup_closed_nosignup_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Closed signup message for users who have not signed up'),
    '#default_value' => variable_get('lottery_auditions_signup_closed_nosignup_message'),
    '#cols' => 50,
    '#rows' => 3,
    '#maxlength' => 300,
    '#description' => t("The message to show on a lottery audition signup form when the lottery is closed and the user has NOT signed up."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function actorscenter_lottery_menu() {
  $items = array();

  $items['admin/config/people/lottery_auditions'] = array(
    'title' => 'Lottery Auditions',
    'description' => 'Configuration settings for the Lottery Auditions module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('actorscenter_lottery_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['lottery_signup'] = array(
    'title' => 'Lottery Audition Signups',
    'description' => 'Sign up for pending lottery auditions.',
    'page callback' => 'lottery_audition_signup_page',
    'access callback' => 'user_is_logged_in', // XXX should have a callback that checks against a configured list of roles to do the thing... actually, define a permission and have site maintainers grant it to appropriate roles
  );

  return $items;
}

/**
 * Fetch the start and end time for a lottery. Useful for sorting displays,
 * hiding old stuff, etc.
 */
$_lottery_audition_cached_times = array();
function _lottery_audition_get_times($lottery){
  global $_lottery_audition_cached_times;
  if(is_array($_lottery_audition_cached_times) &&
      array_key_exists($lottery->nid, $_lottery_audition_cached_times)){
    return $_lottery_audition_cached_times[$lottery->nid];
  }
  $timeblocks = field_view_field('node', $lottery, 'field_lottery_time_blocks');
  $count = $start = $end = 0;
  while(array_key_exists($count, $timeblocks)){
    $realitem = array_pop($timeblocks[$count]['entity']['field_collection_item']);
    $day = field_view_field('field_collection_item', $realitem['field_time_range']['#object'], 'field_time_range', 'full');
    $time = strtotime(preg_replace("/ to .*/", "", strip_tags($day[0]['#markup'])));
    if($start == 0 || $time < $start){
      $start = $time;
    }
    if($end == 0 || $time > $end){
      $end = $time;
    }
    $count++;
  }
  $_lottery_audition_cached_times[$lottery->nid] = array($start, $end);
  return array($start, $end);
}

function _lottery_audition_sort_by_date($a, $b){
  list($a_start, $a_end) = _lottery_audition_get_times($a);
  list($b_start, $b_end) = _lottery_audition_get_times($b);

  return ($a_start < $b_start) ? 1 : -1;
}

function lottery_audition_signup_page(){
  $lotteries = node_load_multiple(array(), array('type' => "lottery_audition"));
  uasort($lotteries, '_lottery_audition_sort_by_date');

  $output = array();
  $output['#markup'] = "";
  foreach ($lotteries as $nid => $lottery){
    // Skip auditions that are fully in the past or aren't yet published.
    list($start, $end) = _lottery_audition_get_times($lottery);
    if($end < time() || $lottery->status != NODE_PUBLISHED){
      continue;
    }
    $output['#markup'] .= drupal_render(drupal_get_form('lottery_signup_'.$nid, $nid, $lottery));
  }

  return $output;
}

function actorscenter_lottery_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['lottery_audition_signup_form'] = array(
    'label' => t('Lottery Audition Signup Form'),
    'custom settings' => TRUE,
  );
  $entity_info['field_collection_item']['view modes']['lottery_audition_signup_form'] = array(
    'label' => t('Lottery Audition Signup Form'),
    'custom settings' => TRUE,
  );
}

function _actorscenter_lottery_form_builder($form, &$form_state, $args){
  global $user;
  $nid = $args[0];
  $lottery = $args[1];
  $disabled = false;
  $ext_requests = db_select('lottery_audition_signups', 's')
    ->fields('s', array('availability', 'placement'))
    ->condition('nid', $nid)
    ->condition('uid', $user->uid)
    ->execute()
    ->fetchAssoc();
  $availability = null;
  $submit_text = t('Sign Up');
  if(count($ext_requests) > 0 && is_array($ext_requests) && array_key_exists('availability', $ext_requests)){
    $availability = unserialize($ext_requests['availability']);
    if(count($availability)  > 0){
      $submit_text = t('Update My Availability');
    }
  }
  $timeblocks = field_view_field('node', $lottery, 'field_lottery_time_blocks');
  $address = "<div class='lottery_audition_address'>".drupal_render(field_view_field('node', $lottery, 'field_lottery_audition_address'))."</div>";
  $instructions = "<div class='lottery_audition_instructions'>".drupal_render(field_view_field('node', $lottery, 'field_lottery_special_instructio'))."</div>";
  $deadline = drupal_render(field_view_field('node', $lottery, 'field_lottery_audition_signup_de'));
  $deadline_str = field_view_field('node', $lottery, 'field_lottery_audition_signup_de');
  $deadline_time = strtotime($deadline_str['#items'][0]['value']);
  $banner_text = "";
  if(time() >= $deadline_time){
    $disabled = true;
  }
  $form['lottery_signup_fieldset'] = array(
    '#prefix' => "<h2>".t($lottery->title)."</h2>",
    '#type' => 'fieldset',
    '#title' => t($lottery->title),
    '#title_display' => 'before',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => array('lottery_audition_signup_wrapper')),
    'lottery_id' => array(
      '#type' => 'hidden',
      '#value' => $nid
    ),
    'info_panel' => array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      '#attributes' => array('class' => array('lottery_audition_signup_dummy_panel')),
      '#suffix' => "<div class='lottery_audition_infoblock'>".$address.$instructions."</div>"
    )
  );
  $form['#attributes'] = array('class' => array('lottery_audition_signup'));
  $form['#submit'] = array('lottery_audition_signup_submit_callback');
  $form['#validate'] = array('lottery_audition_signup_validate_callback');
//  list($start, $end) = _lottery_audition_get_times($lottery);
  $banner = "";
  if(!$disabled){
    $form['lottery_signup_fieldset']['submit'] = array(
      '#type' => 'submit',
      '#weight' => 100,
      '#attributes' => array('class' => array('lottery_signup_submit')),
      '#value' => $submit_text,
    );
    if($availability != null){
      $banner = "<span class='lottery_audition_signup_banner_text' style='background-color:blue;'>Lottery Pending</div>";
    } else {
      $banner = "<span class='lottery_audition_signup_banner_text' style='background-color:green;'>Open</div>";
    }
    $form['lottery_signup_fieldset']['info_panel']['#suffix'] .= "<div class='lottery_audition_infoblock'><div class='lottery_audition_deadline'>$deadline</div><div class='lottery_audition_message'>".variable_get('lottery_auditions_signup_open_message', "")."</div></div>";
  } else{
    if($availability != null){
      $banner = "<span class='lottery_audition_signup_banner_text' style='background-color:blue;'>Lottery Pending</div>";
      $form['lottery_signup_fieldset']['info_panel']['#suffix'] .= "<div class='lottery_audition_infoblock'><div class='lottery_audition_deadline'>$deadline</div><div class='lottery_audition_message'>".variable_get('lottery_auditions_signup_closed_message', "")."</div></div>";
    } else {
      $banner = "<span class='lottery_audition_signup_banner_text' style='background-color:red;'>Closed</div>";
      $form['lottery_signup_fieldset']['info_panel']['#suffix'] .= "<div class='lottery_audition_infoblock'><div class='lottery_audition_deadline'>$deadline</div><div class='lottery_audition_message'>".variable_get('lottery_auditions_signup_closed_nosignup_message', "")."</div></div>";
    }
  }
  $form['lottery_signup_fieldset']['info_panel']['#prefix'] = "<div class='lottery_audition_signup_banner'>$banner</div>";
  $count = 0;
  $current_day = "";
  while(array_key_exists($count, $timeblocks)){
    $realitem = array_pop($timeblocks[$count]['entity']['field_collection_item']);
    $checked = 0;
    $paintbox_class = "lottery_audition_timeblock_paint_unchecked";
    if($availability){
      foreach ($availability as $ext_req){
	if($ext_req == $realitem['field_time_range']['#items'][0]){
	  $checked = 1;
	  $paintbox_class = "lottery_audition_timeblock_paint_checked";
	  break;
	}
      }
    }
    if($disabled){
      $paintbox_class .= " lottery_audition_timeblock_paint_disabled";
    }
    $times = field_view_field('field_collection_item', $realitem['field_time_range']['#object'], 'field_time_range', 'lottery_audition_signup_form');
    $day = field_view_field('field_collection_item', $realitem['field_time_range']['#object'], 'field_time_range', 'full');
    $current_day = strip_tags($day[0]['#markup']);
    $print_day = "";
    if(!array_key_exists($current_day, $form['lottery_signup_fieldset'])){
      $print_day = "<h4 class='lottery_audition_timeblock_day_title'>$current_day</h4>";
      $form['lottery_signup_fieldset'][$current_day] = array(
	'#type' => 'fieldset',
        '#collapsible' => FALSE,
	'#collapsed' => FALSE,
	'#attributes' => array('class' => array('lottery_audition_timeblock_day')),
      );
    }
    $form['lottery_signup_fieldset'][$current_day]['timeblock_'.$count] = array(
      '#type' => 'checkbox',
      '#disabled' => $disabled,
      '#name' => $nid.'_timeblock_'.$count,
      '#attributes' => array('class' => array('lottery_audition_timeblock_checkbox')),
      '#prefix' => "$print_day<div id='${nid}_timeblock_$count' class='lottery_audition_timeblock'><div class='lottery_audition_timeblock_paint $paintbox_class'>".$times[0]['#markup']."</div>",
      '#suffix' => "</div>"
    );
    $form['lottery_signup_fieldset'][$current_day]['timeblock_'.$count]['#default_value'] = $checked;
    $count++;
  }

  return($form);
}

function actorscenter_lottery_forms($form_id, $args) {
  if(!preg_match("/^lottery_signup_\d+$/", $form_id) || count($args) != 2){
    return;
  }
  $nid = $args[0];
  $lottery = $args[1];

  $forms['lottery_signup_'.$nid] = array(
    'callback' => '_actorscenter_lottery_form_builder',
    'callback arguments' => array($args)
  );
  return $forms;
}

function lottery_audition_signup_validate_callback($form, &$form_state){
  $count = 0;
  $timeblocks = array();
  $lottery_id = $form_state['input']['lottery_id'];
  while (array_key_exists("timeblock_$count", $form_state['input'])){
    if(array_key_exists("${lottery_id}_timeblock_$count", $form_state['input'])){
      $timeblocks[] = $count;
    }
    $count++;
  }
  if(count($timeblocks) == 0){
    form_set_error("", "You must sign up for at least one block of time");
  }
  return $form;
}

function lottery_audition_signup_submit_callback($form, &$form_state){
  global $user;
  print $user->uid;
  $nid = $form_state['input']['lottery_id'];
  $lottery = node_load($form_state['input']['lottery_id']);
  $timeblocks = field_view_field('node', $lottery, 'field_lottery_time_blocks');
  $requested_blocks = array();
  $count = 0;
  while (array_key_exists($count, $timeblocks)){
    if(array_key_exists("${nid}_timeblock_$count", $form_state['input'])){
      $item = array_pop($timeblocks[$count]['entity']['field_collection_item']);
      $requested_blocks[] = $item['field_time_range']['#items'][0];
    }
    $count++;
  }
  db_delete('lottery_audition_signups')
    ->condition('nid', $form_state['input']['lottery_id'])
    ->condition('uid', $user->uid)
    ->execute();
  db_insert('lottery_audition_signups')
    ->fields(array(
      'nid' => $form_state['input']['lottery_id'],
      'uid' => $user->uid,
      'availability' => serialize($requested_blocks)
  ))
  ->execute();
  return $form;
}

/*
function actorscenter_lottery_theme($existing, $type, $theme, $path) {
}
*/

/*
function actorscenter_lottery_block_info() {
  $blocks['lottery_audition_signup'] = array(
    'info' => t('Lottery Audition Signups'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}
*/

function actorscenter_lottery_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add custom validation hooks for Field Collections. Horrible.
  if ($context['field']['field_name'] == 'field_lottery_time_blocks') {
    array_unshift($element['#element_validate'], 'actorscenter_lottery_field_lottery_time_blocks_validate');
    $new_tr_validate = array(); // XXX strip out date_combo_validate and call explicitly from our own callback, *after* we've fudged the values
    foreach ($element['field_time_range'][LANGUAGE_NONE][0]['#element_validate'] as $callback){
      if($callback != "date_combo_validate"){
	$new_tr_validate[] = $callback;
      }
    }
    $element['field_time_range'][LANGUAGE_NONE][0]['#element_validate'] = $new_tr_validate;
  }
}

/**
 * Make sure the ends of our audition time blocks are on the same days as their
 * respective beginnings (really we're just collecting the time bit).
 * 
 * It seems we have to account for Date fields being stored in any number of
 * formats (flat strftime()-style strings, arrays of strings representing
 * date and time separately, or DateTime objects). Whoever wrote this crap is
 * the first one up against the wall when the revolution comes.
 */
function _actorscenter_lottery_datefield_sync_dates(&$datefield){
  $date1 = "";
  if(is_object($datefield['value'])){
    $date1 = strtotime($datefield['value']);
  } elseif(is_array($datefield['value'])){
    $date1 = strtotime($datefield['value']['date']);
  } else {
    $date1 = strtotime($datefield['value']);
//    $date1 = preg_replace("/\s.*/", "", $datefield['value'];
  }

  if(is_object($datefield['value2'])){
    $datefield['value2']->setDate(date('Y', $date1), date('m', $date1), date('d', $date1));
  } elseif(is_array($datefield['value2'])){
    $datefield['value2']['date'] = $datefield['value']['date'];
  } else {
    $date2 = strtotime($datefield['value2']);
    $datefield['value2'] = date('Y-m-d', $date1)." ".date('H:i:s', $date2);
  }
}

function actorscenter_lottery_field_lottery_time_blocks_validate($element, &$form_state, $form) {    
  $count = 0;
  drupal_add_css(drupal_get_path('module', 'actorscenter_lottery') . '/actorscenter_lottery.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  while(array_key_exists($count, $form['field_lottery_time_blocks'][LANGUAGE_NONE])){
    // XXX This is the wrong way to do this, but form_set_value just doesn't
    // fucking work
    _actorscenter_lottery_datefield_sync_dates($form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['field_time_range'][LANGUAGE_NONE][0]);
    _actorscenter_lottery_datefield_sync_dates($form_state['input']['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['field_time_range'][LANGUAGE_NONE][0]);

    if(array_key_exists("entity", $form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$count])){
      _actorscenter_lottery_datefield_sync_dates($form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['entity']->field_time_range[LANGUAGE_NONE][0]);
    }


    $count++;
  }

  // Now it should be safe to invoke date_combo_validate
  _actorscenter_lottery_datefield_sync_dates($element['field_time_range'][LANGUAGE_NONE][0]['#value']);
  $element['field_time_range'][LANGUAGE_NONE][0]['value2']['#value']['date'] = $element['field_time_range'][LANGUAGE_NONE][0]['value']['#value']['date'];
  $element['field_time_range'][LANGUAGE_NONE][0]['value2']['date']['#value'] = $element['field_time_range'][LANGUAGE_NONE][0]['value']['date']['#value'];
  date_combo_validate($element['field_time_range'][LANGUAGE_NONE][0], $form_state);

}

/**
 * Implements hook_form_alter().
 */
function actorscenter_lottery_form_alter(&$form, $form_state, $form_id) {
  if($form_id == "lottery_audition_node_form"){
    drupal_add_css(drupal_get_path('module', 'actorscenter_lottery') . '/actorscenter_lottery.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
    drupal_add_js(drupal_get_path('module', 'actorscenter_lottery') . '/actorscenter_lottery.js');

    array_unshift($form['#validate'], 'actorscenter_lottery_form_validate');
    $form['wrapper'] = array(
      '#prefix' => '<div id="lottery_form_wrapper">',
      '#suffix' => '</div>'
    );
    $form['field_lottery_time_blocks']['wrapper'] = array(
      '#prefix' => '<div id="lottery_time_block">',
      '#suffix' => '</div>',
    );
    $count = 0;
    while(array_key_exists($count, $form['field_lottery_time_blocks'][LANGUAGE_NONE])){
      /*
      $form['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['field_time_range'][LANGUAGE_NONE][0]['#ajax'] = array(
	'event' => 'change',
        'callback' => '_actorscenter_lottery_timeblock_ajax',
        'wrapper' => 'lottery_block_timerange_'.$count
      );
      */
      $count++;
    }
  }
}

function _actorscenter_lottery_timeblock_ajax(&$form, $form_state){
  /*
  $commands = array();
  $count = 0;
  while(array_key_exists($count, $form['field_lottery_time_blocks'][LANGUAGE_NONE])){
  }
  */

  return($form['field_lottery_time_blocks']['wrapper']);
}

/**
 */
/*
function actorscenter_lottery_form_submit($form, &$form_state){
}
*/

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function actorscenter_lottery_form_validate($form, &$form_state){
  $count = 0;

  while(array_key_exists($count, $form['field_lottery_time_blocks'][LANGUAGE_NONE])){
    $css_id = "#lottery_block_timerange_$count";
    if(!isset($form['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['field_time_range'][LANGUAGE_NONE][0]['#value'])){
      break;
    }
    $form_elt = "field_lottery_time_blocks][".LANGUAGE_NONE."][$count][field_time_range][und";

    $start = strtotime($form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['field_time_range'][LANGUAGE_NONE][0]['value']);
    $end = strtotime($form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$count]['field_time_range'][LANGUAGE_NONE][0]['value2']);

    if(($end - $start)/3600 > 12){
      form_set_error($form_elt, "Time blocks cannot span more than 12 hours");
    } elseif(($end - $start) < 900) {
      form_set_error($form_elt, "Time blocks must be 15 minutes or longer");
    }
    $subcount = 0;
    while(array_key_exists($subcount, $form['field_lottery_time_blocks'][LANGUAGE_NONE])){
      if($count == $subcount){
	$subcount++;
	continue;
      }
      $substart = strtotime($form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$subcount]['field_time_range'][LANGUAGE_NONE][0]['value']);
      $subend = strtotime($form_state['values']['field_lottery_time_blocks'][LANGUAGE_NONE][$subcount]['field_time_range'][LANGUAGE_NONE][0]['value2']);
      $form_subelt = "field_lottery_time_blocks][".LANGUAGE_NONE."][$subcount][field_time_range][und";
      if (($substart >= $start && $substart <= $end) ||
	  ($subend >= $start && $subend <= $end)){
	form_set_error($form_subelt, "Audition time block ".date('Y-m-d H:i:s', $substart)." - ".date('Y-m-d H:i:s', $subend)." overlaps with another block");
      }
      $subcount++;
    }

    $count++;
  }
}


/**
 * Implements hook_theme_registry_alter().
 */
function actorscenter_lottery_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'actorscenter_lottery')."/templates";
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}
